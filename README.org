* Emacs Spotify

This package allows you to control Spotify from within Emacs.

** Getting Started

This package works out-of-the-box once it's installed.

*** Installing with use-package and vc-use-package

The [[https://github.com/jwiegley/use-package][use-package]] and
[[https://github.com/slotThe/vc-use-package][vc-use-package]] packages come
preinstalled on Emacs 30.

#+begin_src emacs-lisp
(use-package spotify
  :vc (emacs-spotify
       :url "https://github.com/SnootierMoon/emacs-spotify"))
#+end_src

** Usage

*** Logging in to Spotify

- Login to Spotify with ~M-x start-spotify <RET>~.

*** Controlling The Player

 - Play the current song with ~M-x spotify-play <RET>~.
 - Pause the current song with ~M-x spotify-pause <RET>~.
 - Play the next song with ~M-x spotify-next <RET>~.
 - Play the previous song with ~M-x spotify-prev <RET>~.

** Privacy Disclaimer

Spotify API requests made through this package will use my own SDA (Spotify
developer application) by default, called "Emacs Spotify". In the Spotify
Developer Dashboard, I can view general analytics including the number of daily
users and the regions of the world where my SDA is most popular. However, (as far
as I know) I cannot view individual user information, and this package does not
collect any individual information as you use it (the source code is small enough
that you can verify this yourself).

** Alternatives Comparison

This plugin is a personal project that I work on for fun. There may be more
practical alternatives if you're looking for a Spotify plugin (note that these
descriptions may be inaccurate or out-of date, please confirm for yourself):

 - [[https://github.com/danielfm/smudge][danielfm/smudge]] 
   - D-Bus, AppleScript, Web API
   - create playlists, search tracks/playlists, Spotify Connect (queue,
     playback), and more
   - MELPA
 - [[https://codeberg.org/jao/espotify][jao/espotify, counsel-spotify,
   ivy-spotify]]
   - D-Bus, Web API
   - search tracks/playlists, Spotify Connect (queue, playback)
   - [[https://github.com/abo-abo/swiper][Counsel/Ivy]] integration
   - MELPA
 - [[https://github.com/krisajenkins/helm-spotify][Helm Spotify]]
   - D-Bus, AppleScript, Web API search (no login)
   - search track, play track/album, playback
   - [[https://github.com/emacs-helm/helm][Helm]] integration
   - MELPA
 - [[https://github.com/Lautaro-Garcia/counsel-spotify][Lautaro-Garcia/counsel-spotify]]
   - D-Bus, AppleScript, Web API
   - search/play track/artist/playlist/album, playback
   - [[https://github.com/emacs-helm/helm][Helm]] integration
   - MELPA
 - [[https://github.com/remvee/spotify-el][remvee/spotify]]
   - D-Bus
   - playback
   - MELPA
 - [[https://github.com/wandersoncferreira/helm-spotify-plus][Helm Spotify Plus]]
   - D-Bus, AppleScript, Web API (SDA credentials provided)
   - search track, play track/album, playback
   - [[https://github.com/emacs-helm/helm][Helm]] integration
   - MELPA

 - Both D-Bus and AppleScript do not require an internet connection, and
   support playback features that the Web API only supports for Spotify Premium
   users (via [[https://support.spotify.com/us/article/spotify-connect][Spotify
   Connect]). You cannot control the playback using the Web API without Spotify
   Premium. Therefore, many users will probably prefer a plugin that supports
   D-Bus and AppleScript. Since I am personally not currently interested in using
   either of these, I might never implement them into Emacs Spotify myself.

   Note that D-Bus is supported on Unix-based operating systems, and AppleScript
   is supported on Darwin-based operating systems.

 - For Web API usage, all of the plugins above provide SDA credentials in the
   source code or require you to make your own SDA. My plugin instead uses PKCE
   which works out-of-the-box and allows the user to obtain a temporary access
   token without me having to expose SDA credentials. For this reason, PKCE is
   the go-to OAuth method for open source applications. My plugin will also
   periodically refresh this access token automatically. However, when you
   initially obtain an access token or if an access token expires (e.g. when you
   enable my plugin or if your computer sleeps, preventing the token refresher
   from functioning), then you must re-authorize the plugin. This entails opening
   a "Login with Spotify" page in the browser, and clicking a button to authorize
   the plugin. My plugin will open this page automatically for you in the browser
   as-needed. However, some users may find it more convenient to just make their
   own SDA to avoid this hassle.

** Changelog

 - v0.0.3
   - More control of auth behavior through custom settings
   - Implement 401 handling (login prompt when auth lost)
   - Re-implement auto-close of "Login with Spotify" redirect page
 - v0.0.2
   - bump minimum Emacs version to 29.1
   - rename ~spotify-start~ to ~start-spotify~, and ~spotify-stop~ to
     ~stop-spotify~
   - implement ~restart-spotify~
   - add privacy disclaimer in README
   - improve ergonomics for playback control commands
   - ~spotify-play~, ~spotify-pause~, ~spotify-next~, and ~spotify-prev~ are now
     synchronous and display error messages
   - remove dependency on ~simple-httpd~ and related configs such as
     ~spotify-stops-httpd~
 - v0.0.1
   - implement ~spotify-start~, ~spotify-stop~, ~spotify-play~, ~spotify-pause~,
     ~spotify-next~, and ~spotify-prev~

** To-do

More API coverage

** License

GPL v3
