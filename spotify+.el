;;; spotify+.el --- Control Spotify -*- lexical-binding: t -*-

;; Copyright (C) 2020 Akshay Trivedi

;; Author: Akshay Trivedi <aku24.7x3@gmail.com>
;; Maintainer: Akshay Trivedi <aku24.7x3@gmail.com>
;; Version: 0.0.1
;; Created: 9 Aug 2020
;; Keywords: hypermedia
;; Package-Requires: ((emacs "25.1") (simple-httpd "1.5.1"))
;; Homepage: https://github.com/SnootierMoon/emacs-spotify-plus

;; This file is not part of GNU Emacs.

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License

;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Spotify plugin using the PKCE Oauth2 flow (in early development).
;; See README.org for more information.

;;; Code:

;;;; Requires

(require 'browse-url)
(require 'button)
(require 'iimage)
(require 'json)
(require 'map)
(require 'simple-httpd)
(require 'subr-x)
(require 'url)

;;;; Variables

(defgroup spotify+ nil
  "Spotify+ Group."
  :group 'applications)

(defcustom spotify+-enable-logging nil
  "Non-nil if Spotify+ should log messages in the Spotify+ Log Buffer."
  :group 'spotify+
  :type 'boolean)

(defcustom spotify+-log-buffer-name "*Spotify+ Log*"
  "Name for the Spotify+ Log Buffer."
  :group 'spotify+
  :type 'string)

(defcustom spotify+-log-format "[%r]: {MSG}"
  "The format to use for the time in the Spotify+ Log Buffer.

The string should be compatible with `format-time-string'.
Any instance of {MSG} in the string gets replaced with the log message."
  :group 'spotify+
  :type 'string)

(defcustom spotify+-client-id "ee9e6d2cdba8448f9fadfbf85678273e"
  "The client ID for for authorization.

The default Client ID is SnootierMoon's Emacs Spotify Plus
  application on Spotify.  To register your own application, go
  to <https://developer.spotify.com/dashboard/applications>."
  :group 'spotify+
  :type 'string)

(defcustom spotify+-token-refresher-delay 60
  "The delay for repeating for `spotify+--token-refresher'."
  :group 'spotify+
  :type 'string)

(defconst spotify+--scopes '("user-modify-playback-state") ; This is the only scope in use right now.
  ;; '("playlist-modify-private"
  ;;  "playlist-modify-public"
  ;;  "playlist-read-collaborative"
  ;;  "playlist-read-private"
  ;;  "user-follow-modify"
  ;;  "user-follow-read"
  ;;  "user-library-modify"
  ;;  "user-library-read"
  ;;  "user-modify-playback-state"
  ;;  "user-read-currently-playing"
  ;;  "user-read-playback-position"
  ;;  "user-read-playback-state"
  ;;  "user-read-private"
  ;;  "user-read-recently-played"
  ;;  "user-top-read")
  "The list of OAuth2 scopes (permissions).")

(define-error 'spotify+--error "Spotify+: error" 'error)
(define-error 'spotify+--no-token-error "Spotify+: token is nil." 'spotify+--error)
(define-error 'spotify+--invalid-uri-error "Spotify+: Invalid Spotify URI" 'spotify--error)

(defvar spotify+--challenge nil
  "Data necessary for the OAuth2 \"Login with Spotify\" step.

Generated by: `spotify+--challenge-new'.

Should contain the code-challenge, code-verifier,
  redirect-uri, scope, and state during authorization.")

(defvar spotify+--token nil
  "An alist of data relevant to the access token for API usage.

Generated by: `spotify+--token-new' during login, or
              `spotify+--token-refresh' if a token already exists.

Should contains the access_token, expires_in, refresh_token,
  scope, and token_type when authorization succeeds.")

(defvar spotify+--token-refresher nil
  "A timer that calls `spotify+--token-refresh'.

Generated by: `snoot+--token-new' during login.")

(defconst spotify+--endpoint-account       "https://accounts.spotify.com/")
(defconst spotify+--endpoint-api           "https://api.spotify.com/v1/")

(defconst spotify+--endpoint-account-auth  (concat spotify+--endpoint-account "authorize/"))
(defconst spotify+--endpoint-account-token (concat spotify+--endpoint-account "api/token/"))

(defconst spotify+--endpoint-api-next      (concat spotify+--endpoint-api "me/player/next/"))
(defconst spotify+--endpoint-api-prev      (concat spotify+--endpoint-api "me/player/previous/"))

(defconst spotify+--endpoint-api-play      (concat spotify+--endpoint-api "me/player/play/"))
(defconst spotify+--endpoint-api-pause     (concat spotify+--endpoint-api "me/player/pause/"))

(defvar spotify+--display-format-element-delimiters `((copyrights . "\n")
                                                      (images     . "\n")
                                                      (default    . ", ")))
(defvar spotify+--display-format-element-functions `((album                . ,#'spotify+--insert-display-button-from-object)
                                                     (artists              . ,#'spotify+--insert-display-button-from-object)
                                                     (collaborative        . ,#'json-encode-keyword)
                                                     (copyrights           . ,(lambda (copyright) (alist-get 'text copyright)))
                                                     (description          . ,(lambda (description) (let ((begin-point (point))) (insert description) (fill-region begin-point (point))) nil))
                                                     (duration_ms          . ,#'spotify+--format-ms)
                                                     (episodes             . ,(lambda (paging) (spotify+--insert-paging-button (concat (number-to-string (alist-get 'total paging)) " episodes") (alist-get 'href paging))))
                                                     (explicit             . ,#'json-encode-keyword)
                                                     (external_ids         . ,(lambda (external_ids)  (mapconcat (lambda (pair) (concat " - " (symbol-name (car pair)) ": " (cdr pair))) external_ids "\n")))
                                                     (external_urls        . ,(lambda (external_urls) (mapconcat (lambda (pair) (concat " - " (symbol-name (car pair)) ": " (cdr pair))) external_urls "\n")))
                                                     (followers            . ,(lambda (followers) (number-to-string (alist-get 'total followers))))
                                                     (images               . ,(lambda (image) (concat " - " (alist-get 'url image))))
                                                     (is_externally_hosted . ,#'json-encode-keyword)
                                                     (is_playable          . ,#'json-encode-keyword)
                                                     (explicit             . ,#'json-encode-keyword)
                                                     (owner                . ,#'spotify+--insert-display-button-from-object)
                                                     (popularity           . ,(lambda (popularity) (concat (number-to-string popularity) "%")))
                                                     (public               . ,#'json-encode-keyword)
                                                     (show                 . ,#'spotify+--insert-display-button-from-object)
                                                     (tracks               . ,(lambda (paging) (spotify+--insert-paging-button (concat (number-to-string (alist-get 'total paging)) " tracks") (alist-get 'href paging))))
                                                     (default              . ,#'identity)))


(defvar spotify+--display-formats `((album    . ("Album Name: " name " [" album_type "]\nRelease Date: " release_date "\nLabel: " label "\nArtists: " artists "\n\nTracks: " tracks "\n\nGenres: " genres "\nPopularity: " popularity "\n\nExternal IDs:\n" external_ids "\nExternal URLs:\n" external_urls "\nImages:\n" images))
                                    (artist   . ("Artist Name: " name "\n\nGenres: " genres "\nFollowers: " followers "\nPopularity: " popularity "\n\nExternal URLs:\n" external_urls "\nImages:\n" images))
                                    (episode  . ("Episode Name: " name "\nRelease Date: " release_date "\nShow: " show "\n\nLength: " duration_ms "\nExplicit: " explicit "\n\nDescription: " description "\n\nExternal URLs:\n" external_urls "\nImages:\n" images))
                                    (playlist . ("Playlist Name: " name "\nOwner: " owner "\n\nTracks: " tracks "\n\nFollowers: " followers "\n\nCollaborative: " collaborative "\nPublic: " public "\n\nDescription: " description "\n\nExternal URLs:\n" external_urls "\nImages:\n" images))
                                    (show     . ("Show Name: " name "\nPublisher: " publisher "\n\nEpisodes: " episodes "\n\nExplicit: " explicit "\nMedia Type: " media_type "\n\nDescription: " description "\nExternal URLs:\n" external_urls "\nImages:\n" images))
                                    (track    . ("Track Name: " name "\nAlbum: " album "\n\nPopularity: " popularity "\n\nExternal IDs:\n" external_ids "\nExternal URLs:\n" external_urls "\nImages:\n" images))
                                    (user     . ("User Name: " display_name "\n\nFollowers: " followers "\nExternal URLs:\n" external_urls "\nImages:\n" images))))

(defvar spotify+--paging-formats)

(defvar spotify+-display-map
  (let ((map (make-sparse-keymap)))
    (set-keymap-parent map special-mode-map)
    map))

(define-derived-mode spotify+-mode
  special-mode "Spotify+"
  "The mode used for Spotify+ Buffers.")

(defvar-local spotify+--buffer-local-data nil
  "The spotify object associated with the current buffer.")

;;;; Utility Functions

(defun spotify+--random-char (charset)
  "Return a character in CHARSET."
  (elt charset (random (length charset))))


(defun spotify+--random-string (charset length)
  "Return a LENGTH size string of characters in CHARSET."
  (seq-into
   (let ((list))
     (dotimes (_ length list)
       (push (spotify+--random-char charset) list)))
   'string))

(defun spotify+--sha256 (data)
  "Hash DATA into binary using SHA-256 and return the result."
  (secure-hash 'sha256 data nil nil t))

(defun spotify+--b64-to-string (b64)
  "Convert B64 from base64 to a string and return the result."
  (base64-decode-string b64))

(defun spotify+--string-to-b64 (string)
  "Convert STRING from a string to base64 and return the result."
  (base64-encode-string string))

(defun spotify+--b64-to-b64url (b64)
  "Convert B64 from base64 to base64url and return the result."
  (replace-regexp-in-string "/" "_" (replace-regexp-in-string "+" "-" (replace-regexp-in-string "=" "" b64))))

(defun spotify+--b64url-to-b64 (b64url)
  "Convert B64URL from base64url to base64 and return the result."
  (let ((b64 (replace-regexp-in-string "-" "+" (replace-regexp-in-string "_" "/" b64url))))
    (concat b64 (make-string (% (- 4 (length b64)) 4) ?\=))))

(defun spotify+--string-to-b64url (string)
  "Convert STRING from a string to base64url and return the result."
  (spotify+--b64-to-b64url (spotify+--string-to-b64 string)))

(defun spotify+--b64url-to-string (b64url)
  "Convert B64URL from base64url to a string and return the result."
  (spotify+--b64-to-string (spotify+--b64url-to-b64 b64url)))

(defun spotify+--format-ms (milliseconds)
  "Convert MILLISECONDS from milliseconds to a human readable format and return the result."
  (let* ((seconds (/ milliseconds 1000))
         (minutes (/ seconds 60))
         (hours   (/ minutes 60))
         (seconds (% seconds 60))
         (minutes (% minutes 60)))
    (cond ((not (eq hours 0))
           (format "%dh%dm%ds" hours minutes seconds))
          ((not (eq minutes 0))
           (format "%dm%ds" minutes seconds))
          (t
           (format "%ds" seconds)))))

(defun spotify+--href-id (href)
  "Map HREF to a unique simple id."
  (car (split-string (substring href (length spotify+--endpoint-api)) "?")))

(defun spotify+--url-format (url query-params)
  "Format URL and QUERY-PARAMS into a URL and return the URL."
  (concat url "?" (url-build-query-string query-params)))

(defun spotify+--url-browse (url &optional query-params)
  "Open URL in a browser with QUERY-PARAMS."
  (let ((full-url (spotify+--url-format url query-params)))
    (browse-url full-url)
    (spotify+--log "Opened a url in the browser: %s" full-url)))

(defun spotify+--url-retrieve (url callback &rest args)
  "Convenience wrapper over `url-retrieve'.

ARGS is a plist that can have :method, :data, :headers, and :params
Set `url-request-method' to :method in ARGS (\"GET\" by default).
Set `url-request-data' to :data in ARGS.
Set `url-request-extra-headers' to :headers in ARGS and
  \"Content-Type: application/x-www-form-urlencoded\".
Retrieve data from URL with :params in ARGS as URL query parameters.
Asynchronously wat and call CALLBACK when a response is recieved."
  (let ((url-request-method        (plist-get args :method))
        (url-request-data          (url-build-query-string (plist-get args :data)))
        (url-request-extra-headers (append (plist-get args :headers) '(("Content-Type" . "application/x-www-form-urlencoded")))))
    (spotify+--log "Sent new HTTP request to %s" url)
    (url-retrieve (spotify+--url-format url (plist-get args :params))
                  (lambda (_)
                    (spotify+--log "Retrieved response from %s" url)
                    (funcall callback (buffer-substring (+ (eval 'url-http-end-of-headers) 1) (point-max))))
                  nil t)))

(defun spotify+--log (&rest args)
  "Pass ARGS to `format' and log it in the Spotify+ Log Buffer."
  (when spotify+-enable-logging
    (with-current-buffer (get-buffer-create spotify+-log-buffer-name)
      (goto-char (point-max))
      (insert (replace-regexp-in-string
               "{MSG}" (apply #'format args)
               (format-time-string spotify+-log-format nil) t) "\n"))))

;;;; Authorization Functions

(defun spotify+--challenge-new ()
  "Generate an OAuth2 challenge and store it in `spotify+--challenge'."
  (let* ((code-verifier      (spotify+--random-string "-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~" 64))
         (code-challenge     (spotify+--sha256 code-verifier))
         (code-challenge-b64 (spotify+--string-to-b64url code-challenge))
         (redirect-uri       (concat "http://localhost:" (number-to-string httpd-port) "/emacs-spotify-plus-login/"))
         (scope              (mapconcat #'identity spotify+--scopes " "))
         (state              (spotify+--random-string "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" 32)))
    (setq spotify+--challenge `((code-challenge . ,code-challenge-b64)
                                (code-verifier  . ,code-verifier)
                                (redirect-uri   . ,redirect-uri)
                                (scope          . ,scope)
                                (state          . ,state)))
    (spotify+--log "Generated a new OAuth2 challenge: %s" spotify+--challenge)))

(defun spotify+--login ()
  "Open a \"Login with Spotify\" page."
  (spotify+--challenge-new)
  (map-let (code-challenge redirect-uri scope state) spotify+--challenge
    (spotify+--url-browse
     spotify+--endpoint-account-auth
     `(("client_id"            ,spotify+-client-id)
       ("code_challenge"        ,code-challenge)
       ("code_challenge_method" "S256")
       ("redirect_uri"          ,redirect-uri)
       ("response_type"         "code")
       ("scope"                 ,scope)
       ("state"                 ,state)))))

(defun spotify+--token-refresher-delete ()
  "Delete `spotify+--token-refresh-timer'."
  (when spotify+--token-refresher
    (cancel-timer spotify+--token-refresher)
    (setq spotify+--token-refresher nil))
  (spotify+--log "Cleared access token refresher"))

(defun spotify+--token-refresher-set ()
  "Create a new `spotify+--token-refresh-timer'."
  (progn
    (spotify+--token-refresher-delete)
    (setq spotify+--token-refresher
          (run-at-time t spotify+-token-refresher-delay  (lambda ()
                                                           (spotify+--token-refresh)
                                                           (spotify+--log "Refresh called from the refresh timer")))))
  (spotify+--log "Created a new access token refresher"))

(defun spotify+--token-delete ()
  "Delete `spotify+--token'."
  (setq spotify+--token nil)
  (spotify+--log "Cleared the access token"))

(defun spotify+--token-set (token)
  "Set `spotify+--token' to TOKEN if it is valid."
  (spotify+--token-delete)
  (unless (alist-get 'error token)
    (setq spotify+--token token)
    (spotify+--log "Set the access token to: %s" token)))

(defun spotify+--token-full-delete ()
  "Delete `spotify+--token' and `spotify+--token-refresher'."
  (spotify+--token-delete)
  (spotify+--token-refresher-delete))

(defun spotify+--token-full-set (token)
  "Set `spotify+--token' to TOKEN and set a new `spotify+--token-refresher'."
  (spotify+--token-set token)
  (spotify+--token-refresher-set))

(defun spotify+--token-get ()
  "Return the access token as an URL header for API authorization."
  (map-let (access_token) spotify+--token
    (when access_token
      `(("Authorization" . ,(concat "Bearer " access_token))))))

(defun spotify+--token-new (code)
  "Set `spotify+--token' and create a new `spotify+--token-refresher' from CODE.

Should only be called from the servlet."
  (map-let (code-verifier redirect-uri) spotify+--challenge
    (spotify+--url-retrieve spotify+--endpoint-account-token
                            (lambda (response)
                              (spotify+--token-full-set (json-read-from-string response)))
                            :method "POST"
                            :data `(("client_id"      ,spotify+-client-id)
                                    ("code"           ,code)
                                    ("code_verifier"  ,code-verifier)
                                    ("grant_type"     "authorization_code")
                                    ("redirect_uri"   ,redirect-uri)))))

(defun spotify+--token-refresh ()
  "Fetch a new token and put it into `spotify+--token'."
  (map-let (refresh_token) spotify+--token
    (if refresh_token
        (spotify+--url-retrieve spotify+--endpoint-account-token
                                (lambda (response)
                                  (spotify+--token-full-set (json-read-from-string response)))
                                :method "POST"
                                :data `(("client_id"      ,spotify+-client-id)
                                        ("grant_type"     "refresh_token")
                                        ("refresh_token"  ,refresh_token)))
      (spotify+--token-full-delete))))

(defservlet* emacs-spotify-plus-login text/html (state error code)
  (cond ((not (string= state (alist-get 'state spotify+--challenge)))
         (insert "Invalid state. Try logging in with Spotify again."))
        ((identity error) (insert "Error: " error))
        (t (insert "Success. You may return to Emacs. Check the logs if you have any issues.")
           (spotify+--log "Retrieved login permission from user")
           (spotify+--token-new code))))

(defservlet* emacs-spotify-plus-raise text/plain ()
  (insert "yeet"))

;;;; Buffer Functions

(define-button-type 'spotify+--display-button
  'action (lambda (button) (spotify+--open-display-buffer (button-get button :href)))
  'follow-link t)

(define-button-type 'spotify+--paging-button
  'action (lambda (button) (spotify+--open-paging-buffer (button-get button :href)))
  'follow-link t)

(defun spotify+--insert-display-button (name href)
  "Insert a button called NAME that opens a Spotify+ Display Buffer linked to HREF."
  (insert-button name :type 'spotify+--display-button :href href))

(defun spotify+--insert-display-button-from-object (object)
  "Insert a button that opens a Spotify+ Display Buffer linked to OBJECT."
  (map-let (href name) object
    (insert-button name :type 'spotify+--display-button :href href)))

(defun spotify+--insert-paging-button (name href)
  "Insert a button called NAME that opens a Spotify+ Paging Buffer linked to HREF."
  (insert-button name :type 'spotify+--paging-button :href href))

(defun spotify+--insert (element)
  "Insert ELEMENT into the buffer if it is a string."
  (when (stringp element) (insert element)))

(defun spotify+--insert-display-format (format data)
  "FORMAT DATA."
  (mapc (lambda (format-element)
          (cond ((stringp format-element)
                 (insert format-element))
                ((symbolp format-element)
                 (let ((value (alist-get format-element data))
                       (func  (or (alist-get format-element spotify+--display-format-element-functions)  (alist-get 'default spotify+--display-format-element-functions)))
                       (delim (or (alist-get format-element spotify+--display-format-element-delimiters) (alist-get 'default spotify+--display-format-element-delimiters))))
                   (if (vectorp value)
                       (unless (eq 0 (length value))
                         (spotify+--insert (funcall func (elt value 0)))
                         (mapc (lambda (v) (insert delim) (spotify+--insert (funcall func v))) (seq-subseq value 1)))
                     (spotify+--insert (funcall func value)))))))
        format))

(defun spotify+--refresh-display-buffer (&optional type)
  "Refresh the current Spotify+ Display Buffer.

If TYPE is not nil, use the display format associated with TYPE."
  (when spotify+--buffer-local-data
    (let ((inhibit-read-only t))
      (erase-buffer)
      (spotify+--insert-display-format (alist-get (intern (or type (alist-get 'type spotify+--buffer-local-data))) spotify+--display-formats) spotify+--buffer-local-data))
    (goto-char (point-min))))

(defun spotify+--open-display-buffer (href &optional buffer-fn)
  "Display the json object retrieved from HREF in a Spotify+ Display Buffer.

Then call BUFFER-FN (`switch-to-buffer' if nil) on the buffer."
  (if spotify+--token
      (spotify+--url-retrieve href
                              (lambda (response)
                                (let ((json-data (json-read-from-string response)))
                                  (map-let (type uri) json-data
                                    (with-current-buffer (get-buffer-create (concat "*" uri "/display*"))
                                      (spotify+-mode)
                                      (setq spotify+--buffer-local-data json-data)
                                      (spotify+--refresh-display-buffer type)
                                      (funcall (or buffer-fn #'switch-to-buffer) (current-buffer))))))
                              :method "GET"
                              :headers (spotify+--token-get))
    (signal 'spotify+--no-token-error nil)))

(defun spotify+--open-display-buffer-other-window (href)
  "Display the json object retrieved from HREF in a Spotify+ Display Buffer and open it in another window."
  (spotify+--open-display-buffer href #'switch-to-buffer-other-window))

(defun spotify+--open-display-buffer-other-frame (href)
  "Display the json object retrieved from HREF in a Spotify+ Display Buffer and open it in another frame."
  (spotify+--open-display-buffer href #'switch-to-buffer-other-frame))

(defun spotify+--refresh-paging-buffer ()
  "Refresh the current Spotify+ Paging Buffer."
  (when spotify+--buffer-local-data
    (let ((inhibit-read-only t))
      (erase-buffer)
      (map-let (limit next offset previous total) spotify+--buffer-local-data
        (insert (format "Showing %d-%d of %d\n" offset (min (+ offset limit) total) total))
        (spotify+--insert-paging-button "[Prev]" previous)
        (insert " ")
        (spotify+--insert-paging-button "[Next]" next)))
    (goto-char (point-min))))

(defun spotify+--open-paging-buffer (href &optional buffer-fn)
  "Display the paging object retrieved from HREF in a Spotify+ Paging Buffer.

Then call BUFFER-FN (`switch-to-buffer' if nil) on the buffer."
  (if spotify+--token
      (spotify+--url-retrieve href
                              (lambda (response)
                                (let ((json-data (json-read-from-string response)))
                                  (with-current-buffer (get-buffer-create (concat "*spotify:paging:" (spotify+--href-id href) "*"))
                                    (spotify+-mode)
                                    (setq spotify+--buffer-local-data json-data)
                                    (spotify+--refresh-paging-buffer)
                                    (funcall (or buffer-fn #'switch-to-buffer) (current-buffer)))))
                              :method "GET"
                              :headers (spotify+--token-get))
    (signal 'spotify+--no-token-error nil)))

(defun spotify+--open-paging-buffer-other-window (href)
  "Display the paging object retrieved from HREF in a Spotify+ Paging Buffer and open it in another window."
  (spotify+--open-paging-buffer href #'switch-to-buffer-other-window))

(defun spotify+--open-paging-buffer-other-frame (href)
  "Display the paging object retrieved from HREF in a Spotify+ Paging Buffer and open it in another frame."
  (spotify+--open-paging-buffer href #'switch-to-buffer-other-frame))

;;;; Interactive Commands

;;;###autoload
(defun spotify+-start ()
  "Initialize Spotify+.

This function starts a new simple-httpd server if one hasn't been started yet."
  (interactive)
  (unless (httpd-running-p)
    (spotify+--log "Running new simple-http server on port %d" httpd-port)
    (httpd-start))
  (spotify+--login)
  (spotify+--log "Started Spotify+"))

(defun spotify+-stop ()
  "Free all Spotify resources."
  (interactive)
  (spotify+--token-full-delete)
  (spotify+--log "Stopped Spotify+"))

;;;###autoload
(defun spotify+-next ()
  "Go to the next song."
  (interactive)
  (if spotify+--token
      (spotify+--url-retrieve spotify+--endpoint-api-next
                              #'ignore
                              :method "POST"
                              :headers (spotify+--token-get))
    (signal 'spotify+--no-token-error nil)))

;;;###autoload
(defun spotify+-prev ()
  "Go to the previous song."
  (interactive)
  (if spotify+--token
      (spotify+--url-retrieve spotify+--endpoint-api-prev
                              #'ignore
                              :method "POST"
                              :headers (spotify+--token-get))
    (signal 'spotify+--no-token-error nil)))

;;;###autoload
(defun spotify+-play ()
  "Play the current song."
  (interactive)
  (if spotify+--token
      (spotify+--url-retrieve spotify+--endpoint-api-play
                              #'ignore
                              :method "PUT"
                              :headers (spotify+--token-get))
    (signal 'spotify+--no-token-error nil)))

;;;###autoload
(defun spotify+-pause ()
  "Pause the current song."
  (interactive)
  (if spotify+--token
      (spotify+--url-retrieve spotify+--endpoint-api-pause
                              #'ignore
                              :method "PUT"
                              :headers (spotify+--token-get))
    (signal 'spotify+--no-token-error nil)))

(provide 'spotify+)
;;; spotify+.el ends here
